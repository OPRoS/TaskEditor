grammar RFSM;

options {
	//language = C;	
	//ASTLabelType=pANTLR3_BASE_TREE;
	
   	output=AST; 
   	//k=2;  
   	backtrack = true;
   	memoize = true;
}

tokens 
{
   SBODY;VARS;BODY;
   EXPR_ROOT; //this token used in program as int constant. do not delete this
   INCL;
   FNAME;
   EXPRPAR;
   ASMT;
   COND;OR;AND;NOT;BOOL;
   OP;ADD;MUL;SIGN;
   IF;
   TASK;BEHA;TASK2;
   PARMS;
   PARM;
   GOTO;
   STATES;STATE;SMOD;TMOD;
   TRANS;
   ACTION;
   STMTS;
   TNAME;
   SNAME;
   TYPE;
   NAME;
   AMOD;
   CALL;
   CNAME;
   CPARAMS;
   CPARAM;
   WHENT;
   WHENF;  
   SYMB;
   LITE;
   ID; 
   PTYP;STYP;
   WORKER;DESC;
   ENUM;ELEM;MODEL;VAR;VMOD;
   FUNC;RTN;
   LITE_DEC;LITE_BOO;LITE_FLO;LITE_STR;
   LVAR;RVAL;
   STAY;
   CONTEXT;CTXRULE;
   RTDL;RTDLELE;  	
   SEQ;PAR;WITH;	
}

@lexer::includes{
#include "interpreter/RFSMException.h"
}

@lexer::apifuncs{
RECOGNIZER->displayRecognitionError = produceError4Lexer;
}


@parser::includes{
#include "interpreter/RFSMException.h"
}

@parser::apifuncs
{
// Install custom error message display
RECOGNIZER->displayRecognitionError = produceError4Parser;
}


/*
@rulecatch {
    pANTLR3_EXCEPTION exe = EXCEPTION;
    if(NULL != exe) {
        char    buffer[100];
        sprintf(buffer, "\%s", exe->name);
        cout << "Got an exception in parsing recognition: " << buffer;;
    }
}
*/
	
rfsm
	:  s1=rfsmDef EOF
	-> ^(RTDL $s1)
	;
rfsmDef
	:  (includeDef|bhvDeclaration|workerDef|taskDef|enumDef|modelDef|contextDef)*
	   //{printf("kddkdk:\%d",RECOGNIZER->state->exception->type);}
	;
includeDef 
	:  '#''include' s1=fileNames
	-> ^(INCL $s1)
	;	
fileNames
	:  s1=STRING_LITERAL
	-> ^(FNAME $s1) 
	;
workerDef
	:  'task' s1=symbol '('s2=STRING_LITERAL ',' s3=symbol ')'';'
	-> ^(WORKER ^(NAME $s1) ^(DESC $s2) ^(TASK $s3))
	;
taskDef
	: 'task' s1=symbol s2=stmt ';'
	->^(TASK2 ^(NAME $s1) ^(STMTS $s2))
	;		
enumDef
	: 'enum' s1=symbol '{'s2=enumElement '}'';'
	-> ^(ENUM ^(NAME $s1) $s2)
	;
enumElement
	: symbol (',' symbol)* 
	-> ^(ELEM symbol)+
	;	
modelDef
	:  'model' s1=symbol '{'s2=modelElem '}'';'
		//{ printf($a.text);if($a.text){}}
	-> ^(MODEL ^(NAME $s1) $s2)
	;
	
modelElem
	: (varDef|modelDef|funcDef)*
	;
	
contextDef
        : 'context' s1=symbol '{'s2=contextElem '}'';'
        -> ^(CONTEXT ^(NAME $s1) $s2*)
	;
	
contextElem
	: (ctxRule|contextDef)*
	;
		
ctxRule
    : s1=symbol '=' s2=expr_par ';'	
    -> ^(CTXRULE ^(NAME $s1) ^(COND $s2))
    ;
    
varDef
	: s1=varModifier s2=type s3=symbol ';'
	-> ^(VAR ^(VMOD $s1) ^(TYPE $s2) ^(NAME $s3))
	;
	
varModifier	
	: 'in'|'out'|'wvar'|'gvar'
	;
	
funcDef
	: (a='action')? s0=type s1=symbol  '(' (s2=parameterDecl)? ')' ';'
	-> ^(FUNC ^(ACTION $a)? ^(RTN $s0) ^(NAME $s1) $s2?)
	;
	
actionDef
	:  'action' s1=symbol '(' (s2=parameterDecl)? ')'';'
	-> ^(ACTION ^(NAME $s1) $s2?)
	;
		
bhvDeclaration
    :  'behavior' s1=Identifier  '(' (s2=parameterDecl)? ')' bhvBody
    -> ^(BEHA ^(TNAME $s1) ^(PARMS $s2)? bhvBody)
    ;
       
bhvBody
    :  '{' stateDeclaration* '}'(';')?
    -> ^(STATES stateDeclaration*)
    ;
    
parameterDecl
 	: ( parameter ( ',' parameter )* )
 	-> parameter*  
 //	| '(' ')' -> ^(PARM_NON)
 	;
parameter  
 	:  s1=type s2=symbol 
 	-> ^(PARM ^(TYPE $s1) ^(NAME $s2))  
 	;
localVarDef
	:  s1=type s2=Identifier ('=' s3=expr_add)? ';'
	-> ^(LVAR ^(TYPE $s1) ^(NAME $s2) ^(RVAL $s3)?) 
	; 
type
	: primitiveType -> ^(PTYP primitiveType)
	| modelType -> ^(STYP modelType)
	;
	
modelType //enum or model type
	:  symbol
	;

//token is not assinged to variable s1, 'var=rulename' is right example    
stateDeclaration
    :  s1=stateModifier? 'state' s2=Identifier '{' stateBodyDecl? '}'
    -> ^(STATE ^(SMOD $s1)? ^(SNAME $s2)  stateBodyDecl? )	
    ;
    
stateModifier
	: ('initial'|'target') 
	;     
	
stateBodyDecl
    :  (localVarDef)?(transitionBody | actionBody)+
    //-> ^(SBODY  ^(VARS $s1)? ^(BODY $s2)?)
    ;
    	
transitionBody
    :  s1='concurrent'? 'transition' stmt
    -> ^(TRANS ^(TMOD $s1)? ^(STMTS stmt))
    ;
    	
actionBody
	:  s1=actionModifier stmt
	-> ^(ACTION ^(AMOD $s1) ^(STMTS stmt))
	;	 
	
actionModifier
	:  ('entry'|'stay'|'exit')
	;

/*
actstmt
	:  actstmtblock
	|  ifstatement
	|  callstatement
	|  exprstatement
	|  localVarDef
	|  seqstatement
	|  parstatement
	//|  withStmt
	|  emptystatement
	;

	
actstmtblock 
    :  '{'actstmt*'}'
    ->^(STMTS actstmt*)
    ;	
*/
    	    	
stmt
	:  stmtblock
	|  ifstatement
	|  gotostatement
	|  callstatement
	|  exprstatement
	|  localVarDef
	|  emptystatement
	|  seqstatement
	|  parstatement
	;
			
stmtblock 
    :  '{'stmt*'}'
    -> ^(STMTS stmt*)
    ;
    	
seqstatement
    :  'sequential' withStmt
    -> ^(SEQ withStmt)
    ;
    
parstatement
    :  'parallel' withStmt
    -> ^(PAR withStmt)
    ;
    
withStmt
    :  'with'':' stmt
    -> ^(WITH stmt) 
    |  '{' withStmt* '}'
    ;
emptystatement
    : ';'
    ;    	
exprstatement
	:  expr ';' 
	-> expr
	;
	
callstatement
	:  expr_call ';' 
	->expr_call	
	;
	
ifstatement
    : 'if' expr_par stmt ('else' stmt)?
    -> ^(IF ^(COND expr_par) ^(WHENT stmt) ^(WHENF stmt)?)
   // :	'if' expr_par statementBlock (options {k=2;}:'else' statementBlock)?
    ;
        
gotostatement
    : 'goto'(
	  (s1=symbol ';' ->  ^(GOTO ^(STATE $s1)))
	| (s2=expr_call ';' ->  ^(GOTO  ^(BEHA $s2))) 
    	| (s3='stay' ';' -> ^(GOTO ^(STAY $s3)))
	)
    ;
    
expr_call //action,function,task
	:  s1=symbol '(' (s2=parameterValue)? ')'
	-> ^(CALL ^(CNAME $s1) ^(CPARAMS $s2)?)
    ;
    
parameterValue 
 	: (s1=expr  ( ','  s2=expr )*)
 	-> ^(CPARAM expr)*
 //	| '(' ')' -> ^(PARM_NON)
 	;
 	
//parameterAssignmentStatement 
//	:  symbol   '='  expr_cond ';'
//	;    

expr
    :  s1=expr_cond (s2=asmtOp s3=expr_add)? 
    //-> ^(ASMT expr_cond (asmtOp expr_add)?)    
    -> ^(ASMT ^(OP $s2)? $s1 $s3?)
    ;  
expr_cond
    :  expr_or ( '?' expr ':' expr )? 
    -> ^(COND expr_or ( '?' expr ':' expr )?)
    ;
        
expr_or
    :  expr_and ( '||' expr_and )* 
    -> ^(OR expr_and ( expr_and )*)
    ;
    
expr_and
    :  expr_not ( '&&' expr_not )* 
    -> ^(AND expr_not ( expr_not )*)
    ;
    
expr_not
    :  ( '!' )? expr_rel 
    -> ^(NOT ( '!' )? expr_rel)
    ;
    	
expr_rel
    :  s1=expr_add ( s2=relOp s3=expr_add )? 
   //    -> ^(BOOL expr_add ( ^(BOOLOP boolOp) expr_add )*)
    -> ^(BOOL ^(OP $s2)? $s1 $s3?)
    ;
    
expr_add
    :  s1=expr_mul ( s2=addOp s3=expr_mul )*
    //-> ^(ADD ^(OP $s2)? $s1 $s3? )
	//-> ^(ADD ^(OP addOp)* expr_mul expr_mul* )
	-> ^(ADD expr_mul (^(OP addOp)  expr_mul)* )
    ;
    	
expr_mul
    :  s1=expr_sign ( s2=mulOp s3=expr_sign )*
    //-> ^(MUL ^(OP $s2)? $s1 $s3? )
	//-> ^(MUL ^(OP mulOp)* expr_sign expr_sign* )	
	-> ^(MUL  expr_sign (^(OP mulOp) expr_sign)* )	
    ;
    	
expr_sign
    :  (s1=addOp? s2=expr_signed -> ^(SIGN $s1? $s2))
    ;
    
expr_signed
	:  valueType
	|  expr_call
	|  expr_par 
	;

expr_par
    :  '(' expr ')' 
    -> ^(EXPRPAR expr)
    ;
//expr_exp
 //   :	call_expr
 //   |	valueType
 //   ;
   
asmtOp
    :   ('=' | '+=' | '-=' | '*=' | '/=')
    ;   
relOp
    :   ('<'|'<='|'=='|'>'|'>='|'!=')
    ;       
addOp
    :   ('+'|'-')
    ;
mulOp
    :   ('*'|'/'|'%')
    ;    	       
valueType
    :   (symbol -> ^(SYMB symbol))
    |   (literal -> ^(LITE literal))
    ;
literal
    :   (s1=DECIMAL_LITERAL -> ^(LITE_DEC $s1))
    |   (s2=booleanLiteral -> ^(LITE_BOO $s2))
    |   (s3=FLOATING_POINT_LITERAL ->^(LITE_FLO $s3))
    |   (s4=STRING_LITERAL -> ^(LITE_STR $s4))
    ;
    
symbol
    	:   Identifier ('.' Identifier)* 
    	-> ^(ID Identifier ('.' Identifier)*)
    //to get a string by using toStringTree() at ID poisition(root)
    	;
booleanLiteral
    	:   'true'
    	|   'false'
    	;
primitiveType
    	:   'bool'
    	|   'char'
    	|   'byte'
    	|   'short'
    	|   'int'
    	|   'long'
    	|   'float'
    	|   'double'
    	|   'string'
    	;


Identifier 
	:   Letter (Letter|Digit)* 
	;
	
fragment
Letter 
	:  'a'..'z'|'A'..'Z'|'_'|'$'
	;
/*
Letter
    :  '\u0024' |             //'$'
       '\u0041'..'\u005a' |   //'A'..'Z'
       '\u005f' |             //'_'
       '\u0061'..'\u007a' |   //'a'..'z'

       '\u00c0'..'\u00d6' |
       '\u00d8'..'\u00f6' |
       '\u00f8'..'\u00ff' |
       '\u0100'..'\u1fff' |
       '\u3040'..'\u318f' |  //Korean(& hiragana)
       '\u3300'..'\u337f' |
       '\u3400'..'\u3d2d' |
       '\u4e00'..'\u9fff' |
       '\uf900'..'\ufaff'
       
    ;
*/	
DECIMAL_LITERAL
	: Digit+ ('l'|'L')? 
	;
STRING_LITERAL 
    	:  '"' ( EscapeSequence | ~('\\'|'"') )* '"'
    	| '\'' ( EscapeSequence | ~('\\'|'\'') )* '\''
    	;    
FLOATING_POINT_LITERAL
    	:   Digit + '.' Digit* Exponent? FloatTypeSuffix?
    	|   '.' Digit+ Exponent? FloatTypeSuffix?
    	|   Digit + Exponent FloatTypeSuffix?
    	|   Digit + FloatTypeSuffix
    	;
fragment
EscapeSequence 
	: '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
	;
fragment
Exponent 
	: ('e'|'E') ('+'|'-')? ('0'..'9')+ 
	;
fragment
FloatTypeSuffix 
	: ('f'|'F'|'d'|'D') 
	;
fragment
Digit 
	: '0'..'9'
	;   
WS  
	:  (' '|'\r'|'\t'|'\f'|'\n')* {$channel=HIDDEN;}
    	;

COMMENT
    	:   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    	;

LINE_COMMENT
    	: '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    	;
   	    
Symstr
	:	//('~'|'`'|'!'|'@'|'#'|'%'|'^'|'&'|'*'|'|'|':'|','|'.'|'?'|'/'|'\''|'"')/
	~(Letter|Digit|'\''|'"'|'/')
	;
	
	
RStringLiteral 
    	:  '"'  ~('"')* '\'' 
    	|  '\'' ~('\'')* '"'
    	; 
   	
